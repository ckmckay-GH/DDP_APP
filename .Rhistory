registerDoParallel(cluster)
## Configure trainControl object
fitControl <- trainControl(method = "cv",
number = 3,
allowParallel = TRUE)
## Run model
pmlFit2 <- train(classe ~ ., method="rf", data=pml_cp_train, trControl=fitControl, prox=TRUE)
## De-register parallel processing cluster
stopCluster(cluster)
registerDoSEQ()
## Model Output
pmlFit2
## Configure parallel processing
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
## Configure trainControl object
fitControl <- trainControl(method = "cv",
number = 6,
allowParallel = TRUE)
## Run model
pmlFit2 <- train(classe ~ ., method="rf", data=pml_cp_train, trControl=fitControl, prox=TRUE)
## De-register parallel processing cluster
stopCluster(cluster)
registerDoSEQ()
## Model Output
pmlFit2
pred <- predict(pmlFit2, pml_cp_val)
pml_cp_val$predClasse <- pred==pml_cp_val$classe
table(pred, pml_cp_val$classe)
confusionMatrix(pml_cp_val$classe, predict(pmlFit2, pml_cp_val))
## remove non-predictive columns
pml_cp_test <- pml_cp_test[,-(1:7)]
## remove near zero variation columns
nzv <- nearZeroVar(pml_cp_test, saveMetrics=TRUE)
pml_cp_test <- pml_cp_test[,nzv$nzv==FALSE]
## remove predominentaly "NA" columns
NA_cols <- sapply(pml_cp_test, function(x) mean(is.na(x))) > 0.9
pml_cp_ttest <- pml_cp_test[, NA_cols==FALSE]
## Coerce "classe" to factor
pml_cp_ttest$classe <- as.factor(pml_cp_test$classe)
## remove non-predictive columns
pml_cp_test <- pml_cp_test[,-(1:7)]
## remove near zero variation columns
nzv <- nearZeroVar(pml_cp_test, saveMetrics=TRUE)
pml_cp_test <- pml_cp_test[,nzv$nzv==FALSE]
## remove predominentaly "NA" columns
NA_cols <- sapply(pml_cp_test, function(x) mean(is.na(x))) > 0.9
pml_cp_test <- pml_cp_test[, NA_cols==FALSE]
## Coerce "classe" to factor
pml_cp_ttest$classe <- as.factor(pml_cp_test$classe)
## remove non-predictive columns
pml_cp_test <- pml_cp_test[,-(1:7)]
## remove near zero variation columns
nzv <- nearZeroVar(pml_cp_test, saveMetrics=TRUE)
pml_cp_test <- pml_cp_test[,nzv$nzv==FALSE]
## remove predominentaly "NA" columns
NA_cols <- sapply(pml_cp_test, function(x) mean(is.na(x))) > 0.9
pml_cp_test <- pml_cp_test[, NA_cols==FALSE]
## Coerce "classe" to factor
pml_cp_test$classe <- as.factor(pml_cp_test$classe)
pml_cp_test
str(pml_cp_test)
pred
pred <- predict(pmlFit2, pml_cp_test)
str(pml_cp_train)
pml_cp_test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
stringsAsFactor = FALSE, na.strings = c("", "NA", "#DIV/0!"))
str(pml_cp_test)
## remove non-predictive columns
pml_cp_test <- pml_cp_test[,-(1:7)]
## remove near zero variation columns
nzv <- nearZeroVar(pml_cp_test, saveMetrics=TRUE)
pml_cp_test <- pml_cp_test[,nzv$nzv==FALSE]
## remove predominentaly "NA" columns
NA_cols <- sapply(pml_cp_test, function(x) mean(is.na(x))) > 0.9
pml_cp_test <- pml_cp_test[, NA_cols==FALSE]
## Coerce "classe" to factor
pml_cp_test$classe <- as.factor(pml_cp_test$classe)
str(pml_cp_test)
pred <- predict(pmlFit2, pml_cp_test)
pred
str(pred)
pred
confusionMatrix(pml_cp_train$classe, predict(pmlFit2, pml_cp_train))
pmlFit2
testResults <- data.frame(problem_id=pml_cp_test$problem_id, pred=pred)
testResults
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("githubinstall")
library("githubinstall", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Ashley:
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ElemStatLearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("gbm")
install.packages("forecast")
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("gbm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seet(33833)
set.seed(33833)
FitQ1 <- train(y ~ ., method="gbm", data=vowel.train, prox=TRUE)
FitQ1 <- randomForests(y ~ ., method="gbm", data=vowel.train)
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
FitQ1 <- randomForest(y ~ ., method="gbm", data=vowel.train)
FitQ1 <- train(y ~ ., method="rf", data=vowel.train)
FitQ1
FitQ1b <- train(y ~ ., method="gbm", data=vowel.train)
FitQ1b
confusionMatrix(vowel.test$y, predict(FitQ1, vowel.test))
confusionMatrix(vowel.test$y, predict(FitQ1b, vowel.test))
pFitQ1 <- predict(FitQ1, vowel.test)
pFitQ1b <- predict(FitQ1b, vowel.test)
table(pFitQ1, pFitQ1b)
results <- resamples(list(rf=pFitQ1, gbm=pFitQ1b))
summary(results)
resamps <- resamples(list(GBM = FitQ1b, RF=FitQ1))
resamps
summary(resamps)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
FitQ2rf <- train(diagnosis ~ ., method="rf", data=training)
FitQ2gbm <- train(diagnosis ~ ., method="gbm", data=training)
FitQ2ida <- train(diagnosis ~ ., method="ida", data=training)
FitQ2lda <- train(diagnosis ~ ., method="lda", data=training)
FitQ2lda
FitQ2rf
FitQ2gbm
pred.rf <- predict(FitQ2rf, testing)
pred.gbm <- predict(FitQ2gbm, testing)
pred.lda <- predict(FitQ2lda, testing)
confusionMatrix(pred.rf, testing$diagnosis)$overall[1]
confusionMatrix(pred.gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred.lda, testing$diagnosis)$overall[1]
results <- resamples(list(mod1 = FitQ2rf, mod2 = FitQ2gbm, mod3=FitQ2lda))
results
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
FitQ3 <- train(diagnosis ~ ., method="lasso", data=training)
FitQ3 <- train(CompressiveStrength ~ ., method="lasso", data=training)
FitQ3 <- train(CompressiveStrength ~ ., method="lasso", data=training)
?plot.enet
FitQ3
summary(FitQ3)
tuneValue
str(concrete)
plot(FitQ3)
plot(FitQ3, xvar = c("fraction", "penalty", "L1norm", "step"),
use.color = FALSE, ...)
plot(FitQ3, xvar = c("fraction", "penalty", "L1norm", "step"),
use.color = FALSE)
plot.enet(FitQ3$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
gaData.csv <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("~/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
str(dat)
FitQ4 <- bats(training)
FitQ4 <- bats(tstrain)
plot(FitQ4)
h<- dim(testing)[1]
fcast<- forecast(FitQ4,level=95,h=h)
plot(fcast,testing$visitsTumblr)
result3 <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result3 <- c(result3, a)
}
sum(result3)/l * 100
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
FitQ5 <- train(CompressiveStrength ~ ., method="svm", data=training)
FitQ5 <- svm(CompressiveStrength ~ ., data=training)
pred5 <- predict(FitQ5, testing)
error <- testing$CompressionStrength - pred5
svrPredictionRMSE <- rmse(error)
FitQ5
pred5
set.seed(325)
FitQ5 <- svm(CompressiveStrength ~ ., data=training)
pred5 <- predict(FitQ5, testing)
confusionMatrix(testing$CompressiveStrength , predict(FitQ5, testing))
confusionMatrix(testing$CompressiveStrength , predict(FitQ5, testing))
str(testing)
confusionMatrix(testing$CompressiveStrength , predict(FitQ5, testing))
confusionMatrix(testing$CompressiveStrength , pred5)
?rsme
??rsme
rmse <- sqrt(mean((pred5-testing$CompressiveStrength)^2))
rsme
rmse
datasets
data()
data
BJsales
BJsales.lead
head(EuStockMarkets)
str(EuStockMarkets)
rownames(EuStockMarkets)
str(HairEyeColor)
head(HairEyeColor, 20)
HairEyeColor
HairEyeColor <- as.dataframe(HairEyeColor)
HairEyeColor <- as.data.frame(HairEyeColor)
HairEyeColor
str(JohnsonJohnson)
JohnsonJohnson
occupationalStatus
str(occupationalStatus)
presidents
sunspot.month
UCBAdmissions
shiny::runApp('DDP_APP')
library(shiny)
runApp('DDP_APP')
runApp('DDP_APP')
inputWT
inputHP
P <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)')))
p
plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)')))
data(mtcars)
mtcars$model <- rownames(mtcars)
mtcars <- mtcars[,c(4,6,7,12)]
p
P <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)')))
p
plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)')))
runApp('DDP_APP')
library(shiny)
library(plotly)
library(dplyr)
library(ggplot2)
data(mtcars)
mtcars$model <- rownames(mtcars)
mtcars <- mtcars[,c(1,4,6,12)]
## Prediction model
mtfit <- lm(qsec ~ wt + hp, data = mtcars)
## Prediction
inputWT <- 3.5
inputHP <- 200
predict(mtfit, newdata = data.frame(wt = inputWT, hp = inputHP))
PredTime <- predict(mtfit, newdata = data.frame(wt = inputWT, hp = inputHP))
## Plot
P <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)'))) %>%
add_trace(p, type = "scatter3d", x = inputWT, y = inputHP, z = PredTime,
text = "New Car", name = 'New Car', mode = 'markers')
data(mtcars)
mtcars$model <- rownames(mtcars)
mtcars <- mtcars[,c(4,6,7,12)]
## Prediction model
mtfit <- lm(qsec ~ wt + hp, data = mtcars)
## Prediction
inputWT <- 3.5
inputHP <- 200
predict(mtfit, newdata = data.frame(wt = inputWT, hp = inputHP))
PredTime <- predict(mtfit, newdata = data.frame(wt = inputWT, hp = inputHP))
## Plot
P <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)'))) %>%
add_trace(p, type = "scatter3d", x = inputWT, y = inputHP, z = PredTime,
text = "New Car", name = 'New Car', mode = 'markers')
p
data(mtcars)
mtcars$model <- rownames(mtcars)
mtcars <- mtcars[,c(4,6,7,12)]
## Prediction model
mtfit <- lm(qsec ~ wt + hp, data = mtcars)
## Prediction
inputWT <- 3.5
inputHP <- 200
predict(mtfit, newdata = data.frame(wt = inputWT, hp = inputHP))
PredTime <- predict(mtfit, newdata = data.frame(wt = inputWT, hp = inputHP))
## Plot
plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)'))) %>%
add_trace(p, type = "scatter3d", x = inputWT, y = inputHP, z = PredTime,
text = "New Car", name = 'New Car', mode = 'markers')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
runApp('DDP_APP')
mtfit1 <- lm(qsec ~ wt, data = mtcars)
mtcars
data(mtcars)
## Prediction model
mtfit1 <- lm(qsec ~ wt, data = mtcars)
summary(mtfit1)$coef
mtfit2 <- lm(qsec ~ hp, data = mtcars)
summary(mtfit2)$coef
mtfit3 <- lm(qsec ~ disp, data = mtcars)
summary(mtfit3)$coef
mtfit4 <- lm(qsec ~ mpg, data = mtcars)
summary(mtfit4)$coef
mtfit5 <- lm(qsec ~ factor(cyl), data = mtcars)
summary(mtfit5)$coef
mtfit6 <- lm(qsec ~ drat, data = mtcars)
summary(mtfit6)$coef
mtfit7 <- lm(qsec ~ factor(VS), data = mtcars)
summary(mtfit7)$coef
mtfit8 <- lm(qsec ~ factor(am), data = mtcars)
summary(mtfit8)$coef
mtfit9 <- lm(qsec ~ factor(gear), data = mtcars)
summary(mtfit9)$coef
mtfit10 <- lm(qsec ~ factor(carb), data = mtcars)
summary(mtfit10)$coef
mtfit7 <- lm(qsec ~ factor(vs), data = mtcars)
summary(mtfit7)$coef
anova(mtfit1, mtfit2, mtfit3, mtfit4, mtfit5, mtfit6, mtfit7, mtfit8, mtfit9, mtfit10)
mtfit1 <- lm(qsec ~ wt, data = mtcars)
summary(mtfit1)$coef
mtfit2 <- lm(qsec ~ wt + hp, data = mtcars)
summary(mtfit2)$coef
mtfit3 <- lm(qsec ~ wt + hp + disp, data = mtcars)
summary(mtfit3)$coef
mtfit4 <- lm(qsec ~ wt + hp + disp + mpg, data = mtcars)
summary(mtfit4)$coef
mtfit5 <- lm(qsec ~ wt + hp + disp + mpg + factor(cyl), data = mtcars)
summary(mtfit5)$coef
mtfit6 <- lm(qsec ~ wt + hp + disp + mpg + factor(cyl) + drat, data = mtcars)
summary(mtfit6)$coef
mtfit7 <- lm(qsec ~ wt + hp + disp + mpg + factor(cyl) + drat + factor(vs), data = mtcars)
summary(mtfit7)$coef
mtfit8 <- lm(qsec ~ wt + hp + disp + mpg + factor(cyl) + drat + factor(vs) + factor(am), data = mtcars)
summary(mtfit8)$coef
mtfit9 <- lm(qsec ~ wt + hp + disp + mpg + factor(cyl) + drat + factor(vs) + factor(am) + factor(gear), data = mtcars)
summary(mtfit9)$coef
mtfit10 <- lm(qsec ~ wt + hp + disp + mpg + factor(cyl) + drat + factor(vs) + factor(am) + factor(gear) + factor(carb), data = mtcars)
summary(mtfit10)$coef
anova(mtfit1, mtfit2, mtfit3, mtfit4, mtfit5, mtfit6, mtfit7, mtfit8, mtfit9, mtfit10)
mtfit1 <- lm(qsec ~ wt, data = mtcars)
summary(mtfit1)$coef
mtfit2 <- lm(qsec ~ wt + hp, data = mtcars)
summary(mtfit2)$coef
mtfit3 <- lm(qsec ~ wt + hp + drat + disp, data = mtcars)
summary(mtfit3)$coef
mtfit5 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl), data = mtcars)
summary(mtfit5)$coef
mtfit6 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl), data = mtcars)
summary(mtfit6)$coef
mtfit7 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs), data = mtcars)
summary(mtfit7)$coef
mtfit8 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs) + factor(am), data = mtcars)
summary(mtfit8)$coef
mtfit9 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs) + factor(am) + factor(gear), data = mtcars)
summary(mtfit9)$coef
mtfit10 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs) + factor(am) + factor(gear) + factor(carb), data = mtcars)
summary(mtfit10)$coef
anova(mtfit1, mtfit2, mtfit3, mtfit4, mtfit5, mtfit6, mtfit7, mtfit8, mtfit9, mtfit10)
anova(mtfit1, mtfit2, mtfit3, mtfit5, mtfit6, mtfit7, mtfit8, mtfit9, mtfit10)
mtfit1 <- lm(qsec ~ wt, data = mtcars)
summary(mtfit1)$coef
mtfit2 <- lm(qsec ~ wt + hp, data = mtcars)
summary(mtfit2)$coef
mtfit3 <- lm(qsec ~ wt + hp + drat, data = mtcars)
summary(mtfit3)$coef
mtfit4 <- lm(qsec ~ wt + hp + drat + disp, data = mtcars)
summary(mtfit3)$coef
mtfit5 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl), data = mtcars)
summary(mtfit5)$coef
mtfit6 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl), data = mtcars)
summary(mtfit6)$coef
mtfit7 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs), data = mtcars)
summary(mtfit7)$coef
mtfit8 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs) + factor(am), data = mtcars)
summary(mtfit8)$coef
mtfit9 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs) + factor(am) + factor(gear), data = mtcars)
summary(mtfit9)$coef
mtfit10 <- lm(qsec ~ wt + hp + drat + disp + factor(cyl) + factor(vs) + factor(am) + factor(gear) + factor(carb), data = mtcars)
summary(mtfit10)$coef
anova(mtfit1, mtfit2, mtfit3, mtfit4, mtfit5, mtfit6, mtfit7, mtfit8, mtfit9, mtfit10)
mtfit1 <- lm(qsec ~ wt, data = mtcars)
summary(mtfit1)$coef
mtfit2 <- lm(qsec ~ wt + hp, data = mtcars)
summary(mtfit2)$coef
mtfit4 <- lm(qsec ~ wt + hp + disp, data = mtcars)
summary(mtfit3)$coef
mtfit5 <- lm(qsec ~ wt + hp + disp + factor(cyl), data = mtcars)
summary(mtfit5)$coef
mtfit6 <- lm(qsec ~ wt + hp + disp + factor(cyl), data = mtcars)
summary(mtfit6)$coef
mtfit7 <- lm(qsec ~ wt + hp + disp + factor(cyl) + factor(vs), data = mtcars)
summary(mtfit7)$coef
anova(mtfit1, mtfit2, mtfit4, mtfit5, mtfit6, mtfit7)
mtfit1 <- lm(qsec ~ wt, data = mtcars)
summary(mtfit1)$coef
mtfit2 <- lm(qsec ~ wt + hp, data = mtcars)
summary(mtfit2)$coef
mtfit4 <- lm(qsec ~ wt + hp + disp, data = mtcars)
summary(mtfit3)$coef
mtfit6 <- lm(qsec ~ wt + hp + disp + factor(cyl), data = mtcars)
summary(mtfit6)$coef
mtfit7 <- lm(qsec ~ wt + hp + disp + factor(cyl) + factor(vs), data = mtcars)
summary(mtfit7)$coef
anova(mtfit1, mtfit2, mtfit4, mtfit6, mtfit7)
mtfit1 <- lm(qsec ~ wt, data = mtcars)
summary(mtfit1)
mtfit2 <- lm(qsec ~ wt + hp, data = mtcars)
summary(mtfit2)
mtfit4 <- lm(qsec ~ wt + hp + disp, data = mtcars)
summary(mtfit3)
mtfit6 <- lm(qsec ~ wt + hp + disp + factor(cyl), data = mtcars)
summary(mtfit6)
mtfit7 <- lm(qsec ~ wt + hp + disp + factor(cyl) + factor(vs), data = mtcars)
summary(mtfit7)
anova(mtfit1, mtfit2, mtfit4, mtfit6, mtfit7)
runApp('DDP_APP')
library(dplyr)
library(plotly)
mtcars$model <- rownames(mtcars)
plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
hoverinfo = 'text', text = ~paste(model), name = "mtcars") %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight (lbs 1000s)'),
yaxis = list(title = 'Horse Power'),
zaxis = list(title = '1/4 Mile Time (seconds)'))) %>%
add_trace(type = "scatter3d", x = 3.5, y = 200, z = 16.66,
text = "New Car", name = 'New Car', mode = 'markers')
runApp('DDP_APP')
install.packages('rsconnect')
library("rsconnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rsconnect::setAccountInfo(name='rollingbay1965',
token='BC3F8E45ECF04E2A33AB377FA9940574',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rollingbay1965',
token='BC3F8E45ECF04E2A33AB377FA9940574',
secret='<SECRET>')
